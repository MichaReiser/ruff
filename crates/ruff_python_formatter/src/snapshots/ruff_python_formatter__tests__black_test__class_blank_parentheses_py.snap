---
source: crates/ruff_python_formatter/src/lib.rs
expression: snapshot
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/simple_cases/class_blank_parentheses.py
---
## Input

```py
class SimpleClassWithBlankParentheses():
    pass
class ClassWithSpaceParentheses ( ):
    first_test_data = 90
    second_test_data = 100
    def test_func(self):
        return None
class ClassWithEmptyFunc(object):

    def func_with_blank_parentheses():
        return 5


def public_func_with_blank_parentheses():
    return None
def class_under_the_func_with_blank_parentheses():
    class InsideFunc():
        pass
class NormalClass (
):
    def func_for_testing(self, first, second):
        sum = first + second
        return sum

```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -27,4 +27,4 @@
 class NormalClass:
     def func_for_testing(self, first, second):
         sum = first + second
-        return sum
\ No newline at end of file
+        return sum

```

## Ruff Output

```py
class SimpleClassWithBlankParentheses:
    pass


class ClassWithSpaceParentheses:
    first_test_data = 90
    second_test_data = 100

    def test_func(self):
        return None


class ClassWithEmptyFunc(object):
    def func_with_blank_parentheses():
        return 5


def public_func_with_blank_parentheses():
    return None


def class_under_the_func_with_blank_parentheses():
    class InsideFunc:
        pass


class NormalClass:
    def func_for_testing(self, first, second):
        sum = first + second
        return sum

```

## Black Output

```py
class SimpleClassWithBlankParentheses:
    pass


class ClassWithSpaceParentheses:
    first_test_data = 90
    second_test_data = 100

    def test_func(self):
        return None


class ClassWithEmptyFunc(object):
    def func_with_blank_parentheses():
        return 5


def public_func_with_blank_parentheses():
    return None


def class_under_the_func_with_blank_parentheses():
    class InsideFunc:
        pass


class NormalClass:
    def func_for_testing(self, first, second):
        sum = first + second
        return sum
```


